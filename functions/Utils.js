const charsLines = ({
  a: ["       ", "  __ _ ", " / _` |", "| (_| |", " \\__,_|", "       "],
  b: [" _     ", "| |__  ", "| '_ \\ ", "| |_) |", "|_.__/ ", "       "],
  c: ["      ", "  ___ ", " / __|", "|  (_ ", " \\___|", "      "],
  d: ["     _ ", "  __| |", " / _` |", "| (_| |", " \\__,_|", "       "],
  e: ["      ", "  ___ ", " / _ \\", "|  __/", " \\___|", "      "],
  f: ["  __ ", " / _|", "| |_ ", "|  _|", "|_|  ", "     "],
  g: ["       ", "  __ _ ", " / _` |", "| (_| |", " \\__, |", " |___/ "],
  h: [" _     ", "| |__  ", "| '_ \\ ", "| | | |", "|_| |_|", "       "],
  i: [" _ ", "(_)", "| |", "| |", "|_|", "   "],
  j: ["   _ ", "  (_)", "  | |", "  | |", " _/ |", "|__/ "],
  k: [" _    ", "| | __", "| |/ /", "|   < ", "|_|\\_\\", "      "],
  l: [" _ ", "| |", "| |", "| |", "|_|", "   "],
  m: ["           ", " _ __ ___  ", "| '_ ` _ \\ ", "| | | | | |", "|_| |_| |_|", "           "],
  n: ["       ", " _ __  ", "| '_ \\ ", "| | | |", "|_| |_|", "       "],
  o: ["       ", "  ___  ", " / _ \\ ", "| (_) |", " \\___/ ", "       "],
  p: ["       ", " _ __  ", "| '_ \\ ", "| |_) |", "| .__/ ", "|_|    "],
  q: ["       ", "  __ _ ", " / _` |", "| (_| |", " \\__, |", "    |_|"],
  r: ["      ", " _ __ ", "| '__|", "| |   ", "|_|   ", "      "],
  s: ["     ", " ___ ", "/ __|", "\\__ \\", "|___/", "     "],
  t: [" _   ", "| |_ ", "| __|", "| |_ ", " \\__|", "     "],
  u: ["       ", " _   _ ", "| | | |", "| |_| |", " \\__,_|", "       "],
  v: ["       ", "__   __", "\\ \\ / /", " \\ V / ", "  \\_/  ", "       "],
  w: ["          ", "__      __", "\\ \\ /\\ / /", " \\ V  V / ", "  \\_/\\_/  ", "          "],
  x: ["      ", "__  __", "\\ \\/ /", " >  < ", "/_/\\_\\", "      "],
  y: ["       ", " _   _ ", "| | | |", "| |_| |", " \\__, /", " |___/ "],
  z: ["     ", " ____", "|_  /", " / / ", "/___|", "     "],
  A: ["    _    ", "   / \\   ", "  / _ \\  ", " / ___ \\ ", "/_/   \\_\\", "         "],
  B: [" ____  ", "| __ ) ", "|  _ \\ ", "| |_) |", "|____/ ", "       "],
  C: ["  ____ ", " / ___|", "| |    ", "| |___ ", " \\____|", "       "],
  D: [" ____  ", "|  _ \\ ", "| | | |", "| |_| |", "|____/ ", "       "],
  E: [" _____ ", "| ____|", "|  _|  ", "| |___ ", "|_____|", "       "],
  F: [" _____ ", "|  ___|", "| |_   ", "|  _|  ", "|_|    ", "       "],
  G: ["  ____ ", " / ___|", "| |  _ ", "| |_| |", " \\____|", "       "],
  H: [" _   _ ", "| | | |", "| |_| |", "|  _  |", "|_| |_|", "       "],
  I: [" ___ ", "|_ _|", " | | ", " | | ", "|___|", "     "],
  J: ["     _ ", "    | |", " _  | |", "| |_| |", " \\___/ ", "       "],
  K: [" _  __", "| |/ /", "| ' / ", "| . \\ ", "|_|\\_\\", "      "],
  L: [" _     ", "| |    ", "| |    ", "| |___ ", "|_____|", "       "],
  M: [" __  __ ", "|  \\/  |", "| |\\/| |", "| |  | |", "|_|  |_|", "        "],
  N: [" _   _ ", "| \\ | |", "|  \\| |", "| |\\  |", "|_| \\_|", "       "],
  O: ["  ___  ", " / _ \\ ", "| | | |", "| |_| |", " \\___/ ", "       "],
  P: [" ____  ", "|  _ \\ ", "| |_) |", "|  __/ ", "|_|    ", "       "],
  Q: ["  ___  ", " / _ \\ ", "| | | |", "| |_| |", " \\__\\_\\", "       "],
  R: [" ____  ", "|  _ \\ ", "| |_) |", "|  _ < ", "|_| \\_\\", "       "],
  S: [" ____  ", "/ ___| ", "\\___ \\ ", " ___) |", "|____/ ", "       "],
  T: [" _____ ", "|_   _|", "  | |  ", "  | |  ", "  |_|  ", "       "],
  U: [" _   _ ", "| | | |", "| | | |", "| |_| |", " \\___/ ", "       "],
  V: ["__     __", "\\ \\   / /", " \\ \\ / / ", "  \\ V /  ", "   \\_/   ", "         "],
  W: ["__        __", "\\ \\      / /", " \\ \\ /\\ / / ", "  \\ V  V /  ", "   \\_/\\_/   ", "            "],
  X: ["__  __", "\\ \\/ /", " \\  / ", " /  \\ ", "/_/\\_\\", "      "],
  Y: ["__   __", "\\ \\ / /", " \\ V / ", "  | |  ", "  |_|  ", "       "],
  Z: [" _____", "/__  /", "  / / ", " / /_ ", "/____|", "      "],
  0: ["  ___  ", " / _ \\ ", "| | | |", "| |_| |", " \\___/ ", "       "],
  1: ["  __ ", " /_ |", "  | |", "  | |", "  |_|", "    "],
  2: [" ____  ", "|___ \\ ", "  __) |", " / __/ ", "|_____|", "       "],
  3: [" _____ ", "|___ / ", "  |_ \\ ", " ___) |", "|____/ ", "       "],
  4: [" _  _   ", "| || |  ", "| || |_ ", "|__   _|", "   |_|  ", "        "],
  5: [" ____  ", "| ___| ", "|___ \\ ", " ___) |", "|____/ ", "       "],
  6: ["  __   ", " / /_  ", "| '_ \\ ", "| (_) |", " \\___/ ", "       "],
  7: [" _____ ", "|___  |", "   / / ", "  / /  ", " /_/   ", "       "],
  8: ["  ___  ", " ( _ ) ", " / _ \\ ", "| (_) |", " \\___/ ", "       "],
  9: ["  ___  ", " / _ \\ ", "| (_) |", " \\__, |", "   /_/ ", "       "],
  " ": ["    ", "    ", "    ", "    ", "    ", "    "],
  ".": ["     ", "     ", "     ", "  _  ", " (_) ", "     "],
  "-": ["       ", "       ", " _____ ", "|_____|", "       ", "       "],
  "_": ["       ", "       ", "       ", "       ", " _____ ", "|_____|"],
  "/": ["    __", "   / /", "  / / ", " / /  ", "/_/   ", "      "],
  "\\": ["__    ", "\\ \\   ", " \\ \\  ", "  \\ \\ ", "   \\_\\", "      "],
  ":": ["     ", "  _  ", " (_) ", "  _  ", " (_) ", "     "],
  ",": ["     ", "     ", "     ", "  _  ", " ( ) ", " |/  "],
  ";": ["     ", "  _  ", " (_) ", "  _  ", " ( ) ", " |/  "],
  "!": [" _ ", "| |", "| |", "|_|", "(_)", "   "],
  "?": [" ___ ", "|__ \\", " / / ", " |_| ", " (_) ", "     "],
  "|": [" _ ", "| |", "| |", "| |", "| |", "|_|"],
  "&": ["  ___   ", " ( _ )  ", " / _ \\/\\", "| (_>  <", " \\___/\\/", "        "],
  "*": [" \\|/", " /|\\", "    ", "    ", "    ", "    "],
  "[": [" __ ", "| _|", "| | ", "| | ", "| | ", "|__|"],
  "]": [" __ ", "|_ |", " | |", " | |", " | |", "|__|"],
  "(": ["  __", " / /", "| | ", "| | ", "| | ", " \\_\\"],
  ")": ["__  ", " \\ \\", " | |", " | |", " | |", "/_/ "],
  "{": ["   __", "  / /", " | | ", "< <  ", " | | ", "  \\_\\"],
  "}": ["__   ", "  \\ \\", " | | ", " > > ", " | | ", "/_/  "],
  "+": ["       ", "   _   ", " _| |_ ", "|_   _|", "  |_|  ", "       "],
  "°": [" __ ", "/__\\", "\\__/", "    ", "    ", "    "],
  "%": [" _  __", "(_)/ /", "  / / ", " / /_ ", "/_/(_)", "      "],
  ù: ["  __   ", " _\\_\\_ ", "| | | |", "| |_| |", " \\__,_|", "       "],
  é: ["   __ ", "  /_/ ", " / _ \\", "|  __/", " \\___|", "      "],
  è: ["  __  ", "  \\_\\ ", " / _ \\", "|  __/", " \\___|", "      "],
  à: ["  __   ", "  \\_\\_ ", " / _` |", "| (_| |", " \\__,_|", "       "],
  È: ["  __   ", " _\\_\\_ ", "| ____|", "|  _|_ ", "|_____|", "       "],
  À: ["  __   ", "  \\_\\  ", "  /_\\  ", " / _ \\ ", "/_/ \\_\\", "       "],
  Ù: ["  __   ", " _\__\\_ ", "| | | |", "| _ | |", " \\___/ ", "       "],
  $: ["  _  ", " | | ", "/ __)", "\\__ \\", "(   /", " |_| "],
  "£": ["   ___  ", "  / ,_\\ ", "_| |_   ", " | |___ ", "(_,____|", "        "],
  "§": ["   __  ", " _/ _) ", "/  _ \\ ", "\\ \\_\\ \\", " \\  __/", "(__/   "],
  "¤ ": ["/\\___/\\", "\\  _  /", "| (_) |", "/ ___ \\", "\\/   \\/", "       "],
  "µ": ["       ", " _   _ ", "| | | |", "| |_| |", "| ._,_|", "|_|    "],
  "#": ["   _  _   ", " _| || |_ ", "|_  __  _|", "|_  ‾‾  _|", "  |_||_|  ", "          "],
  "~": ["      ", "      ", " /‾\\/‾|", "|_/\\_/", "      ", "      "],
  "'": ["  _ ", " ( )", " |/ ", "    ", "    ", "    "],
  '"': ["  _ _ ", " ( | )", "  V V ", "      ", "      ", "      "],
  "`": ["  _ ", " ( )", "  \\|", "    ", "    ", "    "],
  "¨": [" _  _ ", "(_)(_)", "      ", "      ", "      ", "      "],
  "^": [" /‾‾\\ ", "|_/\\_|", "      ", "      ", "      ", "      "],
  "@": ["   ____  ", "  / __ \\ ", " / / _` |", "| | (_| |", " \\ \\__,_|", "  \\____/ "],
  ç: ["      ", "  ___ ", " / __|", "| (__ ", " \\___|", "  )_) "],
  "²": [" ___ ", "|_  )", " / / ", "/___|", "     ", "     "],
  "€": ["    ___", "   / __|", " _| |__ ", " _| |__ ", "  | |__ ", "   \___|"]
})

module.exports = {
  color: function color(str){
    const obj = { stop: 0, bold: 1, dim: 2, underline: 4, blink: 5, inverted: 7, hide: 8, black: 30, red: 31, green: 32, yellow: 33, blue: 34, magenta: 35, cyan: 36, lightgray: 37, darkgray: 90, lightred: 91, lightgreen: 92, lightyellow: 93, lightblue: 94, lightmagenta: 95, lightcyan: 96, white: 97 }
    return str.replace(/\{(stop|bold|dim|underline|blink|inverted|hide|black|red|green|yellow|blue|magenta|cyan|lightgray|darkgray|lightred|lightgreen|lightyellow|lightblue|lightmagenta|lightcyan|white)\}/g, (_, p) => `\u001b[${obj[p]}m`) + "\u001b[0m"
  },
  getObjPath: function getObjPath(str){
    if (typeof str !== "string") return null;
    return str.match(/(?:\[(?:"|'|`))?(\w|\-|\/)+(?:(?:"|'|`)\])?/gm).map(e => e.match(/\[.+\]/g) ? e.slice(2, e.length-2) : e );
  },
  checkRegex: function checkRegex(regex){
    try { new RegExp(regex); return typeof regex == "string" ? false : true ; } catch(err) { return false; }
  },
  isObject: function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
  },
  getDate: function(date, format){
    const dateObj = new Date(date - (24 * 60 * 60 * 1000));
    const times = { "YYYY": dateObj.getFullYear(), "MM": dateObj.getMonth() + 1, "DD": dateObj.getUTCDate() + 1, "hh": dateObj.getHours(), "mm": dateObj.getMinutes(), "ss": dateObj.getSeconds(), "ms": dateObj.getMilliseconds() };
    return format.replace(/\[(YYYY|MM|DD|hh|mm|ss|ms)\]/g, (_, m) => times[m].toString().padStart(2, "0"));
  },
  ASCII: function ASCII(str){
    const res = ['', '', '', '', '', ''],
    copy = str.split('').filter(c => charsLines[c])
    for (let e = 0; e < copy.length; e++) charsLines[copy[e]].forEach((l, i) => res[i] = res[i].slice(0, res[i].length - ([" ", "_"].some(char => res[i].endsWith(char)) && !l.startsWith(" ") ? 1 : 0)) + l.slice([" ", "_"].some(char => res[i].endsWith(char)) && !l.startsWith(" ") || e == 0 ? 0 : 1))
    return res
  }
}